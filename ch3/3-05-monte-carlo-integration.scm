(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (* (random 1.0) range))))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1) (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))

(define (belongs-to-unit-circle? x y)
  (< (+ (* x x) (* y y)) 1))

(define (estimate-integral predicate x1 y1 x2 y2 n)
  (let ((number-of-positives 0))
    (define (iter i)
      (if (= i 0)
          (exact->inexact
           (* (/ number-of-positives n)
              (* (- x2 x1) (- y2 y1))))
          (let ((rand-x (random-in-range x1 x2))
                (rand-y (random-in-range y1 y2)))
                (if (predicate rand-x rand-y)
                  (set! number-of-positives (+ number-of-positives 1))
                  #f)
                (iter (- i 1)))))
    (iter n)))
